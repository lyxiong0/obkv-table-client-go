/*-
 * #%L
 * OBKV Table Client Framework
 * %%
 * Copyright (C) 2021 OceanBase
 * %%
 * OBKV Table Client Framework is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 * #L%
 */

package obkvrpc

import (
	"io"
	"runtime/debug"
	"sync"
	"time"

	"github.com/oceanbase/obkv-table-client-go/log"
	"github.com/panjf2000/ants/v2"
	"go.uber.org/zap"
)

// CodecServer implement interfaces to read/decode request
// and write/encode response
type CodecServer interface {
	ReadRequest(*Request) error
	WriteResponse(*Response) error
	Call(*Request, *Response) error
	Close()
}

// Server implement server frame
type Server struct {
	MethodRunPool *ants.Pool
	ReqObjPool    *sync.Pool
	CloseChan     *chan struct{} // to close and clean Server
}

// Request is generated by a decoder
type Request struct {
	Method string // use for mapping
	Args   [][]byte
	ID     string
}

type Response struct {
	ID         string
	RspContent string
}

// NewServer init a server
func NewServer(routinePoolSize int, expiredDuration time.Duration, ch *chan struct{}) (*Server, error) {
	var err error
	s := &Server{CloseChan: ch}
	s.MethodRunPool, err = ants.NewPool(routinePoolSize,
		ants.WithExpiryDuration(expiredDuration),
		ants.WithPanicHandler(func(p interface{}) {
			if err := recover(); err != nil {
				zap.L().Error("catch panic", zap.Any("error", err), zap.String("stack", string(debug.Stack())))
			}
		}),
	)
	if err != nil {
		log.Warn("rpcServer", nil, "create goroutine pool failed", zap.Error(err))
		return s, err
	}
	s.ReqObjPool = &sync.Pool{
		New: func() interface{} {
			return new(Request)
		},
	}
	return s, nil
}

// PutRequest clear req and put back to req pool
func (s *Server) PutRequest(req *Request) {
	req.Method = ""
	req.ID = ""
	for i := range req.Args {
		req.Args[i] = nil
	}
	req.Args = nil
	// req.Err = nil
	s.ReqObjPool.Put(req)
}

// Close release resources
func (s *Server) Close() {
	s.MethodRunPool.Release()
}

// ReadRequestWrapper wrap ReadRequest for goroutine pool
type ReadRequestWrapper func()

// ReadRequest read requests until an error occurs
func (s *Server) ReadRequest(wg *sync.WaitGroup, reqChan chan<- *Request, cServer CodecServer) ReadRequestWrapper {
	return func() {
		wg.Add(1)
		defer wg.Done()
		for {
			isStop := false
			select {
			case <-*s.CloseChan:
				cServer.Close()
				s.Close()
				return
			default:
				// ReadRequest may include read and encode, depend on the cServer
				req := s.ReqObjPool.Get().(*Request)
				err := cServer.ReadRequest(req)
				if err != nil {
					if err == io.EOF {
						log.Info("rpcServer", nil, "connection closed", zap.Error(err),
							zap.String("request id", req.ID))
					} else {
						log.Warn("rpcServer", nil, "fail to read command", zap.Error(err),
							zap.String("request id", req.ID))
					}
					s.PutRequest(req)
					close(reqChan)
					isStop = true
				} else {
					reqChan <- req
				}
			}
			if isStop {
				break
			}
		}
	}
}

// RunWorkerWrapper wrap RunWorker for goroutine pool
type RunWorkerWrapper func()

// RunWorker keep processing requests from reqChan until channel reqChan is closed
func (s *Server) RunWorker(wg *sync.WaitGroup, reqChan <-chan *Request, respChan chan<- *Response, cServer CodecServer) RunWorkerWrapper {
	return func() {
		wg.Add(1)
		defer wg.Done()
		defer close(respChan)
		for req := range reqChan {
			resp := new(Response)
			err := cServer.Call(req, resp)
			if err != nil {
				log.Warn("rpcServer", nil, "fail to call method", zap.Error(err))
			}
			respChan <- resp
			s.PutRequest(req)
		}
	}
}

// ServeCodec serve a codec
func (s *Server) ServeCodec(cServer CodecServer) {
	wg := new(sync.WaitGroup)
	defer func() {
		wg.Wait()
		cServer.Close()
		if err := recover(); err != nil {
			zap.L().Error("RunWorker panic", zap.Any("error", err), zap.String("stack", string(debug.Stack())))
		}
	}()
	reqChan := make(chan *Request, 10)
	respChan := make(chan *Response, 10)
	var err error
	// read io -> decode -> Request
	if err = s.MethodRunPool.Submit(s.ReadRequest(wg, reqChan, cServer)); err != nil {
		return
	}

	// exec(request) -> Response
	if err = s.MethodRunPool.Submit(s.RunWorker(wg, reqChan, respChan, cServer)); err != nil {
		return
	}

	for resp := range respChan {
		// Response -> encode -> write io
		err = cServer.WriteResponse(resp)
		if err != nil {
			log.Warn("rpcServer", nil, "fail to write response", zap.Error(err))
			break
		}
	}
}
